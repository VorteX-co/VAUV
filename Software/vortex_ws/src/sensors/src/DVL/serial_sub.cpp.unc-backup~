// Copyright 2021 VorteX-co
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <functional>
#include <memory>
#include <sstream>
#include <string>
#include <vector>
#include "custom_ros_interfaces/msg/dvl.hpp"
#include "rclcpp/rclcpp.hpp"

using std::placeholders::_1;

class Subscriber : public rclcpp::Node {
 public:
  inline Subscriber();

 private:
  inline void ShowMessage(custom_ros_interfaces::msg::DVL::SharedPtr data);
  rclcpp::Subscription<custom_ros_interfaces::msg::DVL>::SharedPtr subscriber_;
};

Subscriber::Subscriber() : Node("serial_sub") {
  std::string topic = "serial_packet";

  subscriber_ = this->create_subscription<custom_ros_interfaces::msg::DVL>(
      topic, 1, std::bind(&Subscriber::ShowMessage, this, _1));
}

void Subscriber::ShowMessage(custom_ros_interfaces::msg::DVL::SharedPtr data) {
  std::ostringstream tt;
  tt << data->time;
  std::string t(tt.str());

  std::ostringstream Vxx;
  Vxx << data->vx;
  std::string Vx(Vxx.str());

  std::ostringstream Vyy;
  Vyy << data->vy;
  std::string Vy(Vyy.str());

  std::ostringstream Vzz;
  Vzz << data->vz;
  std::string Vz(Vzz.str());

  std::ostringstream altt;
  altt << data->altitude;
  std::string r(altt.str());

  std::string dataString = "time: " + t + "," + " Vx: " + Vx + "," +
                           " Vy: " + Vy + "," + " Vz: " + Vz + "," +
                           " altitude: " + r;
  std::cout << dataString << std::endl;
}

/////////////////////////////////////////////////////////////

int main(int argc, char** argv) {
  rclcpp::init(argc, argv);
  auto node = std::make_shared<Subscriber>();
  rclcpp::spin(node);
  rclcpp::shutdown();
  exit(0);
}
